<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Picgo 搜索不到插件</title>
      <link href="/2025/04/06/Q&amp;A/picgo-cannot-search-plugins/"/>
      <url>/2025/04/06/Q&amp;A/picgo-cannot-search-plugins/</url>
      
        <content type="html"><![CDATA[<p>Picgo 出现在【插件设置】无法搜索插件，需要重新下载并安装 PicGo-Setup-2.4.0-beta.9-x64.exe , 即可解决。</p><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250406202541.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> Q&amp;A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bladex OSS 本地存储</title>
      <link href="/2025/04/04/bladex/oss-local/"/>
      <url>/2025/04/04/bladex/oss-local/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>bladex 整合了不同的OSS服务，并统一了接口方便调用。</li><li>但挺多时间还需要支持本地存储，4.2.0.RELEASE正式支持了本地上传并与OSS接口统一。</li></ul><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><ol><li>准备一个NGINX服务，假设NGINX端口：8000，访问后看到如下界面，说明NGINX服务正常。</li></ol><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250324151131.png" alt="Pasted image 20250324151131"></p><ol start="2"><li>前往 【资源管理】-【对象存储】，新增：</li></ol><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250324151214.png" alt="20250324151214"></p><ol start="3"><li>点击【调试】，上传测试图片，若看到图片显示成功则说明本地存储配置成功。</li></ol><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250324151318.png" alt="20250324151318"></p><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250324151333.png" alt="20250324151333"></p><p><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250324151339.png" alt="20250324151339"></p>]]></content>
      
      
      <categories>
          
          <category> Bladex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bladex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocky Linux 9 安装</title>
      <link href="/2025/04/04/rocky-linux/rocky-linux-9-install/"/>
      <url>/2025/04/04/rocky-linux/rocky-linux-9-install/</url>
      
        <content type="html"><![CDATA[<p>在安装 Rocky Linux 9 操作系统之前，我们介绍下 Liunx分区，确保我们系统安装顺利进行。</p><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><p>在 Linux 系统中，分区取决于系统的用途和具体的需求，以下为常见分区方式，建议根据实际需求进行调整。</p><ol><li><strong>&#x2F;boot</strong>分区：<ul><li>大小：建议大小为 200MB至 500MB。</li><li>作用：这个分区用来存储启动时需要的文件，包括 Linux 内核，这个分区不需要很大，因为只包含了启动系统所必需的文件。</li></ul></li><li>根（&#x2F;）分区：<ul><li>大小：建议分配 10GB-20GB。</li><li>作用：根分区是必须的，根分区的大小取决于您打算安装的软件和系统用途。一个基础的服务器系统可能不需要太多空间，但是一个带图形界面的和许多额外软件的桌面系统可能需要更多的空间。</li></ul></li><li>交换（swap）分区：<ul><li>大小：建议大小与内存相等。</li><li>作用：当系统的 物理内存用尽时，交换分区允许系统使用磁盘空间作业临时内存。</li></ul></li><li>&#x2F;home分区：<ul><li>大小：根据剩余空间，可以考虑分配大部分剩余空间。</li><li>作用：用于存储用户个人的文件和配置，单独分区有利于升级或重装系统时保护用户数据。</li></ul></li><li>&#x2F;var 分区（可选）：<ul><li>大小：建议大小为1GB-2GB</li><li>作用：&#x2F;var 分区存放经常变化的文件，如日志文件&#x2F;缓存和邮件队列。在高流量的服务器上，将&#x2F;var分区划分出来可以防止日志文件占满整个根分区。</li></ul></li><li>&#x2F;tmp分区：<ul><li>大小：建议大小为1GB-2GB</li><li>作用：&#x2F;tmp分区存放临时文件。防目临时文件占用过多的磁盘空间，影响系统的稳定性。</li></ul></li></ol><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>这里以 vmware 虚拟机安装为例。</p><p>1）虚拟机名称<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318092752.png" alt="Pasted image 20250318092752"></p><p>2）选择计算资源<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318092922.png" alt="Pasted image 20250318092922"></p><p>3）选择存储<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093007.png" alt="Pasted image 20250318093007"></p><p>4）选择客户机操作系统<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093051.png" alt="Pasted image 20250318093051"></p><p>5）自定义硬件<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093223.png" alt="Pasted image 20250318093223"></p><p>6）启动虚拟机，开始安装 Rocky Linux，选择 Install Rocky Linux<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093422.png" alt="Pasted image 20250318093422"></p><p>7）选择系统语言：<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093633.png" alt="Pasted image 20250318093633"></p><p>8）设置安装目地的、root密码、创建用户等：<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093740.png" alt="Pasted image 20250318093740"></p><p>9）磁盘配置有两种方式：自动与自定义。<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093836.png" alt="Pasted image 20250318093836"></p><p>10）自定义可以手动分区，设置挂载点和容量。这里就不做具体设置。大家根据实际需求配置即可。<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318093934.png" alt="Pasted image 20250318093934"></p><p>11）配置root密码和创建用户后，确保界面没有红色字样，即可点击【开始安装】。<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318094130.png" alt="Pasted image 20250318094130"></p><p>12）安装完成，点击【重启系统】。<br><img src="https://oss.unibss.com:10010/hexo/2025/04/07/20250318094153.png" alt="Pasted image 20250318094153"></p><p>到此，整个安装就完成了。</p><h2 id="查看系统版本信息"><a href="#查看系统版本信息" class="headerlink" title="查看系统版本信息"></a>查看系统版本信息</h2><p>重启进入系统后，可以通过以下命令查看系统版本及内核版本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/rocky-release </span><br><span class="line">Rocky Linux release 9.3 (Blue Onyx) </span><br><span class="line"></span><br><span class="line"># 默认内核版本 5.14.0 </span><br><span class="line">[root@localhost ~]# uname -r </span><br><span class="line">5.14.0-362.8.1.el9_3.x86_64 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rocky Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocky Linux 9 网络配置</title>
      <link href="/2025/04/04/rocky-linux/rocky-linux-9-network/"/>
      <url>/2025/04/04/rocky-linux/rocky-linux-9-network/</url>
      
        <content type="html"><![CDATA[<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>我们采用最小安装，没有GUI界面操作，在系统完成后，我们第一步需要配置IP地址，确保可以通过 SSH 连接，这样进行命令行操作更方便。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看设备信息 </span><br><span class="line">[root@localhost ~]$ nmcli dev</span><br><span class="line">DEVICE  TYPE      STATE                                    CONNECTION </span><br><span class="line">ens192  ethernet  connecting (getting IP configuration)    ens192     </span><br><span class="line">lo      loopback  connected (externally)                   lo     </span><br><span class="line"></span><br><span class="line"># 设置 IPV4 为手动(manual)</span><br><span class="line"># 默认 IPV4 为自动(auto)，此时要配置固定 IP，修改模式为手动</span><br><span class="line">[root@localhost ~]# nmcli connection modify ens192 ipv4.method manual</span><br><span class="line"></span><br><span class="line"># 配置 ip地址</span><br><span class="line">[root@localhost ~]# nmcli connection modify ens192 ipv4.addresses 20.2.97.63/24</span><br><span class="line"></span><br><span class="line"># 配置网关</span><br><span class="line">[root@localhost ~]# nmcli connection modify ens192 ipv4.gateway 20.2.97.1</span><br><span class="line"></span><br><span class="line"># 配置DNS</span><br><span class="line">[root@localhost ~]# nmcli connection modify ens192 ipv4.dns &quot;114.114.114.114 8.8.8.8&quot;</span><br><span class="line"></span><br><span class="line"># 重新加载网络配置</span><br><span class="line">[root@localhost ~]# nmcli connection down ens192; nmcli connection up ens192</span><br><span class="line"></span><br><span class="line"># 查看接口配置信息</span><br><span class="line">[root@localhost ~]# nmcli device show ens192</span><br><span class="line">GENERAL.DEVICE:                         ens192</span><br><span class="line">GENERAL.TYPE:                           ethernet</span><br><span class="line">GENERAL.HWADDR:                         00:50:56:B2:D2:66</span><br><span class="line">GENERAL.MTU:                            1500</span><br><span class="line">GENERAL.STATE:                          100 (connected)</span><br><span class="line">GENERAL.CONNECTION:                     ens192</span><br><span class="line">GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/14</span><br><span class="line">WIRED-PROPERTIES.CARRIER:               on</span><br><span class="line">IP4.ADDRESS[1]:                         20.2.97.63/24</span><br><span class="line">IP4.GATEWAY:                            20.2.97.1</span><br><span class="line">IP4.ROUTE[1]:                           dst = 20.2.97.0/24, nh = 0.0.0.0, mt = 100</span><br><span class="line">IP4.ROUTE[2]:                           dst = 0.0.0.0/0, nh = 20.2.97.1, mt = 100</span><br><span class="line">IP4.DNS[1]:                             114.114.114.114</span><br><span class="line">IP6.ADDRESS[1]:                         fe80::250:56ff:feb2:d266/64</span><br><span class="line">IP6.GATEWAY:                            --</span><br><span class="line">IP6.ROUTE[1]:                           dst = fe80::/64, nh = ::, mt = 1024</span><br><span class="line"></span><br><span class="line"># 查看 IP 地址</span><br><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:b2:d2:66 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp11s0</span><br><span class="line">    inet 20.2.97.63/24 brd 20.2.97.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::250:56ff:feb2:d266/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"># 查看配置文件，如果需要配置多IP，可以修改此配置文件。</span><br><span class="line">[root@localhost ~]# cat /etc/NetworkManager/system-connections/ens192.nmconnection</span><br><span class="line"></span><br><span class="line"># 查看网络连接</span><br><span class="line">[root@localhost ~]# nmcli connection</span><br><span class="line">NAME    UUID                                  TYPE      DEVICE </span><br><span class="line">ens192  a3a51af9-4c1c-3e17-a3ab-b50e503dc91a  ethernet  ens192 </span><br><span class="line">lo      7ca222b0-9358-4b6c-b140-20829ecd58e9  loopback  lo</span><br><span class="line"></span><br><span class="line"># 重启网络</span><br><span class="line">[root@localhost ~]# systemctl restart NetworkManager</span><br><span class="line">[root@localhost ~]# systemctl status NetworkManager</span><br><span class="line">● NetworkManager.service - Network Manager</span><br><span class="line">     Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; preset: enabled)</span><br><span class="line">     Active: active (running) since Mon 2025-03-17 18:11:22 CST; 16h ago</span><br><span class="line">       Docs: man:NetworkManager(8)</span><br><span class="line">   Main PID: 901 (NetworkManager)</span><br><span class="line">      Tasks: 3 (limit: 203493)</span><br><span class="line">     Memory: 9.5M</span><br><span class="line">        CPU: 1.648s</span><br><span class="line">     CGroup: /system.slice/NetworkManager.service</span><br><span class="line">             └─901 /usr/sbin/NetworkManager --no-daemon</span><br></pre></td></tr></table></figure><h2 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a>查看网络配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[afc@localhost ~]$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:50:56:b2:d2:66 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp11s0</span><br><span class="line">    inet 20.2.97.63/24 brd 20.2.97.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::250:56ff:feb2:d266/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">[afc@localhost ~]$ nmcli dev</span><br><span class="line">DEVICE  TYPE      STATE                   CONNECTION </span><br><span class="line">ens192  ethernet  connected               ens192     </span><br><span class="line">lo      loopback  connected (externally)  lo         </span><br><span class="line"></span><br><span class="line">[afc@localhost ~]$ nmcli conn show</span><br><span class="line">NAME    UUID                                  TYPE      DEVICE </span><br><span class="line">ens192  a3a51af9-4c1c-3e17-a3ab-b50e503dc91a  ethernet  ens192 </span><br><span class="line">lo      7ca222b0-9358-4b6c-b140-20829ecd58e9  loopback  lo     </span><br><span class="line">[afc@localhost ~]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rocky Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 资源存储</title>
      <link href="/2025/03/31/hexo-asset-storage/"/>
      <url>/2025/03/31/hexo-asset-storage/</url>
      
        <content type="html"><![CDATA[<p>Hexo资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件。比方说一篇文章中可能需要引用图片，那么图片就可以作为资源存在。如果图片多了就需要有效的管理，hexo 提供了两种方法：</p><ol><li>在 source 文件夹创建 images 文件夹，将图片统一放到文件中。通过以下语法引用图片</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](/images/qrcode.png)</span><br></pre></td></tr></table></figure><p><img src="/images/qrcode.png"></p><ol start="2"><li>开启 post_asset_folder: true</li></ol><p>想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Hexo将会在你每一次通过 hexo new post 命令创建新文章时自动创建一个与文章同名的文件夹，然后将图片或其他资源放入其中。<br>引入 hexo-renderer-marked ，它允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过以下语法引用图片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](qrcode.png)</span><br></pre></td></tr></table></figure><p> <img src="/qrcode.png"></p><blockquote><p>不过，通过实践，上述两种方法和图床对较，最终还是选择使用图床，通过图床上传图片，然后通过图床提供的外链引入图片。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 SSH 连接到 GitHub</title>
      <link href="/2025/03/07/github-clone-ssh/"/>
      <url>/2025/03/07/github-clone-ssh/</url>
      
        <content type="html"><![CDATA[<p>我们在使用 github pull或push项目时，如果走 https 方式，经常出现莫名奇妙的错误，经过一翻查阅，决定采用 SSH 方式链接。</p><h2 id="生成新-SSH-密钥"><a href="#生成新-SSH-密钥" class="headerlink" title="生成新 SSH 密钥"></a>生成新 SSH 密钥</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519 -C &quot;你的邮箱@mail.com&quot;</span><br></pre></td></tr></table></figure><h2 id="获取-ssh-key-内容"><a href="#获取-ssh-key-内容" class="headerlink" title="获取 ssh key 内容"></a>获取 ssh key 内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># C:\Users\xinde\.ssh</span><br><span class="line">cat id_ed25519.pub</span><br><span class="line">ssh-raa xxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h2 id="新增-SSH-密钥到-GitHub-帐户"><a href="#新增-SSH-密钥到-GitHub-帐户" class="headerlink" title="新增 SSH 密钥到 GitHub 帐户"></a>新增 SSH 密钥到 GitHub 帐户</h2><p>setting-&gt;SSH and GPG key -&gt; new SSH key，复制上述的 key 内容</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>需要知道ssh key的配置是针对每台主机的！比如我在某台主机上操作git和我的远程仓库，走ssh协议，就需要配置ssh key，放上去的key是当前主机的ssh公钥。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot上传文件报：Required request part &#39;file&#39; is not present，Current request is not a multipart request.</title>
      <link href="/2021/08/26/Q&amp;A/springboot-file-upload-multipartfile/"/>
      <url>/2021/08/26/Q&amp;A/springboot-file-upload-multipartfile/</url>
      
        <content type="html"><![CDATA[<ol><li>问题描述</li></ol><p>SpringBoot上传后台接收的都是null。且总是报各种错误例如：Required request part ‘file’ is not present，Current request is not a multipart request.</p><p>SpringBoot默认是基于StandardServletMultipartResolve处理，MultipartStandardServletMultipartResolver依赖于Servlet3.0对multipart请求的支持（始于Spring3.1）；CommonsMultipartResolver使用Jakarta Commons FileUpload解析multipart请求。本文最终采用CommonsMultipartResolver。</p><ol start="2"><li>解决办法<br>2.1. 加入配置类</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.multipart.MultipartResolver;</span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class UploadConfig &#123;</span><br><span class="line">    //显示声明CommonsMultipartResolver为mutipartResolver</span><br><span class="line">    @Bean(name = &quot;multipartResolver&quot;)</span><br><span class="line">    public MultipartResolver multipartResolver() &#123;</span><br><span class="line">        CommonsMultipartResolver resolver = new CommonsMultipartResolver();</span><br><span class="line">        resolver.setDefaultEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        //resolveLazily属性启用是为了推迟文件解析，以在在UploadAction中捕获文件大小异常</span><br><span class="line">        resolver.setResolveLazily(true);</span><br><span class="line">        //设置了文件放入临时文件夹的最小大小限制</span><br><span class="line">        resolver.setMaxInMemorySize(40960);</span><br><span class="line">        //设置单个上传数据总大小25M</span><br><span class="line">        resolver.setMaxUploadSizePerFile(25*1024*1024);</span><br><span class="line">        //设置总上传数据总大小50M</span><br><span class="line">        resolver.setMaxUploadSize(5 * 1024 * 1024);</span><br><span class="line">        return resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 在springboot启动类上加入注解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//排除原有的Multipart配置</span><br><span class="line">@EnableAutoConfiguration(exclude = &#123;MultipartAutoConfiguration.class&#125;)</span><br><span class="line">public class Application extends SpringBootServletInitializer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别注意Controller接收的时候一定要加上@RequestParam,否则不可用,如下所示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestParam(&quot;file&quot;) MultipartFile multipartFile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Q&amp;A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-install-theme-butterfly</title>
      <link href="/2020/04/23/hexo-install-theme-butterfly/"/>
      <url>/2020/04/23/hexo-install-theme-butterfly/</url>
      
        <content type="html"><![CDATA[<div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">克隆最新版本</button><button type="button" class="tab">下载稳定版本</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在终端窗口下，定位到 butterfly 站点目录下。使用 Git checkout 代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>前往 NexT 版本 <a href="https://github.com/iissnan/hexo-theme-next/releases">发布页面</a>。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。例如，下载 v0.4.0 版本：<br><img src="https://theme-next.iissnan.com/uploads/five-minutes-setup/download-stable-version.png" alt="next-releases"><br>解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-0.4.0）更改为 next。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong>， 找到 theme 字段，注释掉默认的主题并将其值更改为 butterfly。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><blockquote><p>建议复制 themes&#x2F;butterfly 目录下的 _config.yml 文件到根目录下，并重命名为 _config.butterfly.yml ，以覆盖默认配置。</p></blockquote><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><ol><li>固定导航</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li>在配置文件 _config.butterfly.yml 中，找到 menu 字段，并添加以下内容：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu</span>:</span><br><span class="line">  首页: / || fas fa-home</span><br><span class="line">  归档: <span class="regexp">/archives/</span> || fas fa-archive</span><br><span class="line">  标签: <span class="regexp">/tags/</span> || fas fa-tags</span><br><span class="line">  分类: <span class="regexp">/categories/</span> || fas fa-folder-open</span><br><span class="line">  娱乐||fas fa-<span class="attr">list</span>:</span><br><span class="line">    音乐: <span class="regexp">/music/</span> || fas fa-music</span><br><span class="line">    照片: <span class="regexp">/photo/</span> || fa-solid fa-image</span><br><span class="line">    电影: <span class="regexp">/movies/</span> || fas fa-video</span><br><span class="line">  友链: <span class="regexp">/link/</span> || fas fa-link</span><br><span class="line">  关于: <span class="regexp">/about/</span> || fas fa-heart</span><br></pre></td></tr></table></figure><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><ol><li>安装插件：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-search --save</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件 <strong>_config.yml</strong>：</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># Choose: algolia_search / local_search / docsearch</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page <span class="string">&quot;archives&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page <span class="string">&quot;tags&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page <span class="string">&quot;categories&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="修改副标题-每日一句"><a href="#修改副标题-每日一句" class="headerlink" title="修改副标题(每日一句)"></a>修改副标题(每日一句)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Choose: <span class="literal">false</span>/1/2/3</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="literal">false</span> - <span class="built_in">disable</span> the <span class="keyword">function</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">1 - hitokoto.cn</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">2 - https://api.aa1.cn/doc/yiyan.html</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">3 - jinrishici.com</span></span><br><span class="line">  source: 2</span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Need to install the hexo-wordcount plugin</span></span><br><span class="line">npm install hexo-wordcount --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Configuration</span></span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><h3 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h3><ol><li>主页封面图片</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_img:</span> <span class="string">/img/index.jpg</span></span><br></pre></td></tr></table></figure><ol start="2"><li>footer 背景</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer是否显示图片背景(与top_img一致)</span></span><br><span class="line"><span class="attr">footer_img:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>文章详情页图片</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span>        <span class="comment"># 标题</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">hello</span>]             <span class="comment"># 标签</span></span><br><span class="line"><span class="attr">categories:</span>               <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">hello</span> <span class="string">word~</span>  <span class="comment"># 描述</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">/images/hexo-install-theme-butterfly/butterfly-docs-03-cover.png</span> <span class="comment"># 文章顶部背景图</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/images/hexo-install-theme-butterfly/butterfly-docs-03-cover.png</span>   <span class="comment"># 文章封面</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ol start="4"><li>归档顶部图片</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">archive_img:</span> <span class="string">/img/archive.jpg</span></span><br></pre></td></tr></table></figure><ol start="5"><li>标签顶部图片</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_img:</span> <span class="string">/img/tag.jpg</span></span><br></pre></td></tr></table></figure><ol start="6"><li>分类顶部图片</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">category_img:</span> <span class="string">/img/category.jpg</span></span><br></pre></td></tr></table></figure><h3 id="主题配色"><a href="#主题配色" class="headerlink" title="主题配色"></a>主题配色</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme_color:</span></span><br><span class="line"><span class="comment">#   enable: true</span></span><br><span class="line"><span class="comment">#   main: &quot;#49B1F5&quot;</span></span><br><span class="line"><span class="comment">#   paginator: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   button_hover: &quot;#FF7242&quot;</span></span><br><span class="line"><span class="comment">#   text_selection: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   link_color: &quot;#99a9bf&quot;</span></span><br><span class="line"><span class="comment">#   meta_color: &quot;#858585&quot;</span></span><br><span class="line"><span class="comment">#   hr_color: &quot;#A4D8FA&quot;</span></span><br><span class="line"><span class="comment">#   code_foreground: &quot;#F47466&quot;</span></span><br><span class="line"><span class="comment">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line"><span class="comment">#   toc_color: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   blockquote_padding_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   blockquote_background_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   scrollbar_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   meta_theme_color_light: &quot;ffffff&quot;</span></span><br><span class="line"><span class="comment">#   meta_theme_color_dark: &quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><h3 id="背景图-动态线条效果"><a href="#背景图-动态线条效果" class="headerlink" title="背景图-动态线条效果"></a>背景图-动态线条效果</h3><p>看到官网背景漂亮的线条效果，点击还会动态变化，效果 pretty good。直接修改 _config.butterfly.yml 文件:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># canvas_ribbon</span></span><br><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The size of ribbon</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="comment"># The opacity of ribbon (0 ~ 1)</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-gateway-nacos-dynamic-routing</title>
      <link href="/2020/03/11/springcloud-gateway-nacos-dynamic-routing/"/>
      <url>/2020/03/11/springcloud-gateway-nacos-dynamic-routing/</url>
      
        <content type="html"><![CDATA[<h2 id="nacos-发布配置"><a href="#nacos-发布配置" class="headerlink" title="nacos 发布配置"></a>nacos 发布配置</h2><ul><li>通过nacos提供的SDK或直接调用OPENAPI方式发布配置</li><li>发布配置注意多个路由放在一个配置中，而不是一个路由创建一个配置</li></ul><h2 id="gateway-监听nacos下发的配置"><a href="#gateway-监听nacos下发的配置" class="headerlink" title="gateway 监听nacos下发的配置"></a>gateway 监听nacos下发的配置</h2><ul><li>使用框架提供的动态路由方法，必须使用blade-gateway-dev.json</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;id&quot;: &quot;example-list&quot;,</span><br><span class="line">    &quot;order&quot;: 0,</span><br><span class="line">    &quot;predicates&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;name&quot;: &quot;Path&quot;,</span><br><span class="line">                    &quot;args&quot;: &#123;</span><br><span class="line">                        &quot;pattern&quot;: &quot;/api/football/match/list&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;filters&quot;: [</span><br><span class="line">            ],</span><br><span class="line">    &quot;uri&quot;: &quot;lb://ltb-api&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spingboot静态资源路径</title>
      <link href="/2019/09/26/spingboot-static-resource-path/"/>
      <url>/2019/09/26/spingboot-static-resource-path/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 默认提供了静态资源处理，而有时我们需要自定义资源映射，可定义项目内部目录，也可定义外部目录。</p><h2 id="通过文件配置"><a href="#通过文件配置" class="headerlink" title="通过文件配置"></a>通过文件配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    mvc:</span><br><span class="line">        static-path-pattern: /**</span><br><span class="line">    resources:</span><br><span class="line">         static-locations: classpath:/META-INF/resources/,classpath:/resources/, classpath:/static/, classpath:/public/</span><br></pre></td></tr></table></figure><p>上面这几个都是静态资源的映射路径，优先级顺序为：META-INF&#x2F;resources &gt; resources &gt; static &gt; public<br>如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    mvc:</span><br><span class="line">        static-path-pattern: /**</span><br><span class="line">    resources:</span><br><span class="line">        static-locations: classpath:/META-INF/resources/,classpath:/resources/, classpath:/static/, classpath:/public/, file:$&#123;uploadfile&#125;</span><br><span class="line"></span><br><span class="line">uploadfile: /home/upload/</span><br></pre></td></tr></table></figure><h2 id="通过-Configuration配置"><a href="#通过-Configuration配置" class="headerlink" title="通过@Configuration配置"></a>通过@Configuration配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationConfig extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/**&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/resources/&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/static/&quot;)</span><br><span class="line">                .addResourceLocations(&quot;classpath:/public/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/upload/**&quot;).addResourceLocations(&quot;file:/home/upload/&quot;);</span><br><span class="line">        super.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>无论文件配置方式还是注解方式，一定要注意路径最后的“&#x2F;”必须要有。</li><li>通过注解方式配置会覆盖默认配置。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>启动 vue 工程报：If you are using vue-loader@&gt;=10.0, simply update vue-template-compiler</title>
      <link href="/2019/09/12/Q&amp;A/vue-packages-version-mismatch/"/>
      <url>/2019/09/12/Q&amp;A/vue-packages-version-mismatch/</url>
      
        <content type="html"><![CDATA[<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Module build failed: Error: </span><br><span class="line"></span><br><span class="line">Vue packages version mismatch:</span><br><span class="line"></span><br><span class="line">- vue@2.5.17 (/Users/xinzhang/Documents/IdeaProjects/incubator-vue-antd-admin/node_modules/vue/dist/vue.runtime.common.js)</span><br><span class="line">- vue-template-compiler@2.6.10 (/Users/xinzhang/Documents/IdeaProjects/incubator-vue-antd-admin/node_modules/vue-template-compiler/package.json)</span><br><span class="line"></span><br><span class="line">This may cause things to work incorrectly. Make sure to use the same version for both.</span><br><span class="line">If you are using vue-loader@&gt;=10.0, simply update vue-template-compiler.</span><br><span class="line">If you are using vue-loader@&lt;10.0 or vueify, re-installing vue-loader/vueify should bump vue-template-compiler to the latest.</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>经常有启动vue工程时会出现如上错误提示，出现这种错误之后可以使用命令，将vue的版本改成和vue-template-compiler的版本一致，使用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue@2.6.10 --save </span><br><span class="line">yarn add vue@2.6.10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Q&amp;A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用vuex实现数据字典</title>
      <link href="/2019/08/20/using-vuex-to-realize-dict/"/>
      <url>/2019/08/20/using-vuex-to-realize-dict/</url>
      
        <content type="html"><![CDATA[<h3 id="vuex定义"><a href="#vuex定义" class="headerlink" title="vuex定义"></a>vuex定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">state</span>:&#123;</span><br><span class="line">    <span class="comment">// 排序类型字典</span></span><br><span class="line">    <span class="attr">messageOrderTypeDict</span>: [],</span><br><span class="line">    <span class="comment">// 排序参数字典</span></span><br><span class="line">    <span class="attr">messageOrderParamDict</span>: [],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">messageOrderParamDict</span> (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">messageOrderParamDict</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">messageOrderTypeDict</span> (state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">messageOrderTypeDict</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">    <span class="title function_">SET_MESSAGE_ORDER_PARAM_DICT</span> (state, payload) &#123;</span><br><span class="line">        state.<span class="property">messageOrderParamDict</span> = payload</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SET_MESSAGE_COMMENT_LIST</span> (state, payload) &#123;</span><br><span class="line">        state.<span class="property">messageCommentList</span> = payload</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">// 获取排序方向，排序类型字典</span></span><br><span class="line">    <span class="title function_">getMessageOrderDict</span> (&#123; commit &#125;, payload) &#123;</span><br><span class="line">        http.<span class="title function_">request</span>(<span class="title class_">App</span>.<span class="property">getDictionary</span>, payload).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = _.<span class="title function_">get</span>(res, <span class="string">&#x27;data&#x27;</span>) || &#123;&#125;</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_MESSAGE_ORDER_PARAM_DICT&#x27;</span>, data[<span class="string">&#x27;order-param&#x27;</span>])</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;SET_MESSAGE_ORDER_TYPE_DICT&#x27;</span>, data[<span class="string">&#x27;order-type&#x27;</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="页面调用"><a href="#页面调用" class="headerlink" title="页面调用"></a>页面调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([</span><br><span class="line">        <span class="comment">// 排序字典</span></span><br><span class="line">        <span class="string">&#x27;messageOrderTypeDict&#x27;</span>,</span><br><span class="line">        <span class="comment">// 排序字典</span></span><br><span class="line">        <span class="string">&#x27;messageOrderParamDict&#x27;</span></span><br><span class="line">    ])</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getMessageOrderDict</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getMessageOrderDict</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;getMessageOrderDict&#x27;</span>, [<span class="string">&#x27;order-param&#x27;</span>, <span class="string">&#x27;order-type&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 使用</title>
      <link href="/2019/07/28/use-ideaj/"/>
      <url>/2019/07/28/use-ideaj/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h2 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h2><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1-无法启动"><a href="#1-无法启动" class="headerlink" title="1.无法启动"></a>1.无法启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开finder-&gt;应用程序-&gt;idea.app-&gt;右键-&gt;显示包内容-&gt;然后MaxOS-&gt;双击shell脚本（idea）</span><br></pre></td></tr></table></figure><p>这样是通过命令行的方式来启动IDEA。<br>仔细看里面的提示，尤其Error开头的信息，应该会有具体原因。</p><p>you know？ 然后JetbrainsCrack-3.1-release-enc.jar 被我不小心删了，放回原位就好了……</p><h3 id="1-永久使用"><a href="#1-永久使用" class="headerlink" title="1.永久使用"></a>1.永久使用</h3><p>在输入验证码时，一直提示“key is invaild”，打开~&#x2F;资源库&#x2F;Preferences&#x2F;<br>其中有个 IntelliJIdea2018.2 文件，里面也会有个idea.vmoptions ，也在最后一行加入；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-javaagent:JetbrainsCrack-3.1-release-enc.jar</span><br></pre></td></tr></table></figure><p>再打开软件再次输入验证码即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;licenseId&quot;:&quot;1337&quot;,</span><br><span class="line">&quot;licenseeName&quot;:&quot;ChaosGod&quot;,</span><br><span class="line">&quot;assigneeName&quot;:&quot;&quot;,</span><br><span class="line">&quot;assigneeEmail&quot;:&quot;&quot;,</span><br><span class="line">&quot;licenseRestriction&quot;:&quot;Unlimited license till end of the century.&quot;,</span><br><span class="line">&quot;checkConcurrentUse&quot;:false,</span><br><span class="line">&quot;products&quot;:[</span><br><span class="line">&#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;DB&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;GO&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&#123;&quot;code&quot;:&quot;RD&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;</span><br><span class="line">],</span><br><span class="line">&quot;hash&quot;:&quot;2911276/0&quot;,</span><br><span class="line">&quot;gracePeriodDays&quot;:7,</span><br><span class="line">&quot;autoProlongated&quot;:false&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>use-oracle-xe</title>
      <link href="/2019/07/28/use-oracle-xe/"/>
      <url>/2019/07/28/use-oracle-xe/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Oracle-XE-基础指南"><a href="#使用-Oracle-XE-基础指南" class="headerlink" title="使用 Oracle XE 基础指南"></a>使用 Oracle XE 基础指南</h1><h2 id="一、Oracle-XE-简介"><a href="#一、Oracle-XE-简介" class="headerlink" title="一、Oracle XE 简介"></a>一、Oracle XE 简介</h2><p>Oracle Database Express Edition（Oracle XE）是甲骨文公司推出的一款免费、便捷且功能强大的数据库版本，特别适合于开发、测试以及小型项目部署等场景。它具备完整的数据库管理功能，支持多种操作系统平台。</p><h2 id="二、安装-Oracle-XE"><a href="#二、安装-Oracle-XE" class="headerlink" title="二、安装 Oracle XE"></a>二、安装 Oracle XE</h2><h3 id="（一）下载安装包"><a href="#（一）下载安装包" class="headerlink" title="（一）下载安装包"></a>（一）下载安装包</h3><p>访问甲骨文官方网站的 Oracle XE 下载页面。根据你所使用的操作系统（如 Windows、Linux 等），选择对应的安装包进行下载。确保下载的版本与你的系统架构（32 位或 64 位）相匹配。</p><p>下载完成后，找到安装包文件，通常为一个压缩文件（如.zip 或.rpm 等格式）。</p><h3 id="（二）安装过程（以-Windows-为例）"><a href="#（二）安装过程（以-Windows-为例）" class="headerlink" title="（二）安装过程（以 Windows 为例）"></a>（二）安装过程（以 Windows 为例）</h3><p>解压安装包到一个指定目录，例如 “C:\oraclexe”。</p><p>进入解压后的目录，找到安装程序文件（通常为 “setup.exe”），双击运行。</p><p>安装向导启动，按照提示逐步进行安装：</p><p><strong>接受许可协议条款</strong>：仔细阅读许可协议，如无异议，选择接受。</p><p><strong>选择安装路径</strong>：可使用默认路径 “C:\oraclexe”，也可自行指定其他目录，点击 “下一步”。</p><p><strong>设置数据库管理员（SYS 和 SYSTEM 用户）的密码</strong>：设置一个强密码，并务必牢记，后续登录数据库管理工具及进行数据库操作时会用到。</p><p><strong>配置监听端口和数据库服务端口</strong>：一般可使用默认设置，若与系统中其他程序端口冲突，可根据提示修改为其他未被占用的端口。</p><p>安装过程中，安装程序会自动进行各项组件的安装与配置，此过程可能需要一些时间，请耐心等待。安装完成后，会提示安装成功。</p><h2 id="三、配置-Oracle-XE"><a href="#三、配置-Oracle-XE" class="headerlink" title="三、配置 Oracle XE"></a>三、配置 Oracle XE</h2><h3 id="（一）启动与停止服务"><a href="#（一）启动与停止服务" class="headerlink" title="（一）启动与停止服务"></a>（一）启动与停止服务</h3><p><strong>在 Windows 系统中</strong>：</p><p>通过 “服务” 管理工具（可在 “运行” 中输入 “services.msc” 打开），找到 “OracleServiceXE” 和 “OracleXETNSListener” 服务。这两个服务分别对应数据库实例和监听程序。</p><p><strong>启动服务</strong>：右键点击服务名称，选择 “启动”，即可启动相应服务，确保数据库能够正常运行并监听客户端请求。</p><p><strong>停止服务</strong>：同理，选择 “停止” 可停止服务。若需要对数据库进行维护或更改某些配置，可能需要先停止服务。</p><p><strong>在 Linux 系统中</strong>：</p><p><strong>启动服务</strong>：使用命令<code>sudo service oracle - xe start</code>。</p><p><strong>停止服务</strong>：使用命令<code>sudo service oracle - xe stop</code>。</p><h3 id="（二）配置监听"><a href="#（二）配置监听" class="headerlink" title="（二）配置监听"></a>（二）配置监听</h3><p>Oracle XE 的监听配置文件位于安装目录下的 “network\admin” 文件夹中，文件名为 “listener.ora”。使用文本编辑器打开该文件。</p><p>可在文件中查看和修改监听相关的配置参数，如监听地址、端口等。例如，默认配置可能如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LISTENER =</span><br><span class="line"></span><br><span class="line">&amp;#x20; (DESCRIPTION\_LIST =</span><br><span class="line"></span><br><span class="line">&amp;#x20;   (DESCRIPTION =</span><br><span class="line"></span><br><span class="line">&amp;#x20;     (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))</span><br><span class="line"></span><br><span class="line">&amp;#x20;   )</span><br><span class="line"></span><br><span class="line">&amp;#x20; )</span><br></pre></td></tr></table></figure><p>若需要修改监听地址或端口，可根据实际需求进行调整。修改完成后，保存文件。</p><p>3. 为使配置生效，需要重新启动监听服务（如前文所述，在 Windows 或 Linux 系统中通过相应方式重启 “OracleXETNSListener” 服务）。</p><h3 id="（三）数据库实例配置"><a href="#（三）数据库实例配置" class="headerlink" title="（三）数据库实例配置"></a>（三）数据库实例配置</h3><p>数据库实例的主要配置文件为 “init.ora”，同样位于安装目录下的 “database” 文件夹中。虽然一般情况下不需要对该文件进行大量修改，但在某些特殊需求场景下（如调整数据库内存参数等），可使用文本编辑器打开进行编辑。</p><p>例如，如果需要调整数据库的共享池大小，可在文件中找到类似 “shared_pool_size” 的参数进行修改。但修改此类参数时需谨慎，确保设置的值符合系统资源情况及数据库性能需求，避免因设置不当导致数据库性能下降甚至无法正常运行。修改完成后保存文件。</p><p>若修改了数据库实例的关键配置参数，通常需要重启数据库实例服务（即 “OracleServiceXE” 服务），以使新配置生效。</p><h2 id="四、连接到-Oracle-XE"><a href="#四、连接到-Oracle-XE" class="headerlink" title="四、连接到 Oracle XE"></a>四、连接到 Oracle XE</h2><h3 id="（一）使用-SQL-Plus"><a href="#（一）使用-SQL-Plus" class="headerlink" title="（一）使用 SQL*Plus"></a>（一）使用 SQL*Plus</h3><p>SQL<em>Plus 是 Oracle 自带的命令行工具，用于执行 SQL 语句和管理数据库。在安装 Oracle XE 后，可通过以下方式启动 SQL</em>Plus：</p><p><strong>在 Windows 系统中</strong>：在 “开始” 菜单中找到 “Oracle - OraDb11g_home1” 文件夹，然后在其子文件夹中找到 “SQL Plus” 程序，点击运行。</p><p><strong>在 Linux 系统中</strong>：打开终端，输入命令 “sqlplus”。</p><p>启动 SQL*Plus 后，会提示输入用户名和密码。输入在安装过程中设置的数据库管理员用户名（如 SYSTEM）及密码，然后按回车键。</p><p>如果用户名和密码正确，将成功登录到 SQL*Plus，此时可看到 SQL &gt; 提示符，表示可以开始输入 SQL 命令对数据库进行操作。例如，可输入 “SELECT SYSDATE FROM DUAL;” 命令来查询当前系统日期。</p><h3 id="（二）使用图形化工具（以-Oracle-SQL-Developer-为例）"><a href="#（二）使用图形化工具（以-Oracle-SQL-Developer-为例）" class="headerlink" title="（二）使用图形化工具（以 Oracle SQL Developer 为例）"></a>（二）使用图形化工具（以 Oracle SQL Developer 为例）</h3><p>下载并安装 Oracle SQL Developer 工具。可从 Oracle 官方网站获取安装包，安装过程与一般软件安装类似，按照提示逐步完成安装。</p><p>启动 Oracle SQL Developer。首次启动时，需要配置连接信息：</p><p>点击 “文件” 菜单，选择 “新建”-&gt;“数据库连接”。</p><p>在弹出的 “新建 &#x2F; 编辑连接” 对话框中，填写以下信息：</p><p><strong>连接名</strong>：自定义一个连接名称，以便识别该连接。</p><p><strong>用户名</strong>：输入数据库管理员用户名（如 SYSTEM）。</p><p><strong>密码</strong>：输入对应的密码。</p><p><strong>主机名</strong>：通常为 “<a href="https://localhost/">localhost</a>”，若数据库安装在远程服务器上，则输入服务器的 IP 地址或主机名。</p><p><strong>端口</strong>：默认值为 1521，若在安装或配置过程中修改了端口，则输入实际使用的端口号。</p><p><strong>服务名</strong>：一般为 “XE”，这是 Oracle XE 的默认服务名。</p><p>填写完成后，点击 “测试” 按钮，若连接成功，会提示 “连接成功”，然后点击 “确定” 保存连接配置。</p><p>在 SQL Developer 的主界面左侧 “连接” 面板中，找到刚才创建的连接，展开后可看到数据库中的各种对象（如表、视图、存储过程等）。右键点击 “SQL 工作表”，选择 “新建 SQL 工作表”，即可在右侧编辑区域输入 SQL 语句并执行，与使用 SQL*Plus 类似，但具有更直观的图形化界面。</p><h2 id="五、基本数据库操作"><a href="#五、基本数据库操作" class="headerlink" title="五、基本数据库操作"></a>五、基本数据库操作</h2><h3 id="（一）创建表"><a href="#（一）创建表" class="headerlink" title="（一）创建表"></a>（一）创建表</h3><p>在 SQL*Plus 或 SQL Developer 中，使用 CREATE TABLE 语句来创建表。例如，创建一个名为 “employees” 的表，包含员工编号（employee_id）、姓名（employee_name）、年龄（age）和部门（department）字段，可输入以下 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employees (</span><br><span class="line"></span><br><span class="line">&amp;#x20;   employee\_id NUMBER(10),</span><br><span class="line"></span><br><span class="line">&amp;#x20;   employee\_name VARCHAR2(50),</span><br><span class="line"></span><br><span class="line">&amp;#x20;   age NUMBER(3),</span><br><span class="line"></span><br><span class="line">&amp;#x20;   department VARCHAR2(30)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上述语句中，NUMBER 和 VARCHAR2 是 Oracle 数据库中的数据类型，分别用于存储数字和可变长度字符串。NUMBER (10) 表示该字段可存储最大 10 位的数字，VARCHAR2 (50) 表示该字段可存储最大 50 个字符的字符串。</p><h3 id="（二）插入数据"><a href="#（二）插入数据" class="headerlink" title="（二）插入数据"></a>（二）插入数据</h3><p>使用 INSERT INTO 语句向表中插入数据。例如，向刚才创建的 “employees” 表中插入一条员工记录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO employees (employee\_id, employee\_name, age, department)</span><br><span class="line"></span><br><span class="line">VALUES (1, &#x27;John Doe&#x27;, 30, &#x27;Sales&#x27;);</span><br></pre></td></tr></table></figure><p>执行上述语句后，一条新的员工记录将被插入到 “employees” 表中。可根据需要插入多条记录，只需重复执行 INSERT INTO 语句并修改 VALUES 子句中的数据即可。</p><h3 id="（三）查询数据"><a href="#（三）查询数据" class="headerlink" title="（三）查询数据"></a>（三）查询数据</h3><p>使用 SELECT 语句查询表中的数据。例如，查询 “employees” 表中的所有员工信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT \* FROM employees;</span><br></pre></td></tr></table></figure><p>上述语句中的 “<em>” 表示选择所有字段。若只想查询特定字段，可将 “</em>” 替换为具体字段名，如 “SELECT employee_name, department FROM employees;”，这样将只返回员工姓名和所在部门的信息。</p><p>还可以使用 WHERE 子句对查询结果进行过滤。例如，查询年龄大于 30 岁的员工信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT \* FROM employees WHERE age &gt; 30;</span><br></pre></td></tr></table></figure><h3 id="（四）更新数据"><a href="#（四）更新数据" class="headerlink" title="（四）更新数据"></a>（四）更新数据</h3><p>使用 UPDATE 语句更新表中的数据。例如，将 “employees” 表中员工编号为 1 的员工年龄更新为 31 岁：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE employees</span><br><span class="line"></span><br><span class="line">SET age = 31</span><br><span class="line"></span><br><span class="line">WHERE employee\_id = 1;</span><br></pre></td></tr></table></figure><p>执行上述语句后，符合 WHERE 子句条件（即员工编号为 1）的记录中的年龄字段将被更新为 31 岁。</p><h3 id="（五）删除数据"><a href="#（五）删除数据" class="headerlink" title="（五）删除数据"></a>（五）删除数据</h3><p>使用 DELETE 语句删除表中的数据。例如，删除 “employees” 表中部门为 “Sales” 的所有员工记录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM employees WHERE department = &#x27;Sales&#x27;;</span><br></pre></td></tr></table></figure><p>执行上述语句后，所有部门为 “Sales” 的员工记录将从 “employees” 表中被删除。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mybatis 报错：org.apache.ibatis.binding.BindingException. Parameter &#39;XXX&#39; not found. Available parameters are [arg0, params, param1, param2]</title>
      <link href="/2019/07/20/Q&amp;A/org-apache-ibatis-binding-BindingException-Parameter-not-found/"/>
      <url>/2019/07/20/Q&amp;A/org-apache-ibatis-binding-BindingException-Parameter-not-found/</url>
      
        <content type="html"><![CDATA[<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>导致这个错误的原因是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPage&lt;OrderDto&gt; page(IPage&lt;OrderDto&gt; page, Map&lt;String, Object&gt; params);</span><br></pre></td></tr></table></figure><p>这里传入了多个参数，需要添加@Param注解：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPage&lt;OrderDto&gt; page(@Param(&quot;page&quot;) IPage&lt;OrderDto&gt; page, @Param(&quot;params&quot;) Map&lt;String, Object&gt; params);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Q&amp;A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VuePress生成项目文档网站</title>
      <link href="/2018/09/23/vuepress-install/"/>
      <url>/2018/09/23/vuepress-install/</url>
      
        <content type="html"><![CDATA[<p><strong>VuePress</strong> 是一个基于Vue的轻量级静态网站生成器，用于满足项目文档的需求而创建的。</p><h2 id="VuePress-安装"><a href="#VuePress-安装" class="headerlink" title="VuePress 安装"></a>VuePress 安装</h2><p>VuePress并不会象其他静态网站工具如：Hexo 那样帮我们创建好目录结构和文件。因此需要我们在指定文件夹中新建目录结构和文件如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├─ docs</span><br><span class="line">│  └─ .vuepress</span><br><span class="line">│     └─ config.js</span><br><span class="line">│  ├─ guide</span><br><span class="line">│     └─ getting-started.md</span><br><span class="line">│     └─ README.md</span><br><span class="line">│  ├─ README.md</span><br><span class="line">└─ package.json</span><br></pre></td></tr></table></figure><h3 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a>config.js</h3><p>网站的 <a href="">配置</a> 信息，您可以在此配置大部分的参数。这里提供常用基本的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    base:&#x27;/vuepress/&#x27;,</span><br><span class="line">    title: &#x27;Wizard&#x27;,</span><br><span class="line">    description: &#x27;Welcome to Wizard site&#x27;,</span><br><span class="line">    themeConfig: &#123;</span><br><span class="line">        nav: [</span><br><span class="line">            &#123; text: &#x27;Home&#x27;, link: &#x27;/&#x27; &#125;,</span><br><span class="line">            &#123; text: &#x27;指南&#x27;, link: &#x27;/guide/&#x27; &#125;,</span><br><span class="line">            &#123; text: &#x27;VuePress&#x27;, link: &#x27;https://vuepress.vuejs.org/&#x27; &#125;,</span><br><span class="line">        ],</span><br><span class="line">        sidebar: &#123; &#x27;/guide/&#x27;: genSidebarConfig(&#x27;指南&#x27;) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function genSidebarConfig(title) &#123;</span><br><span class="line">    return [</span><br><span class="line">        &#123;</span><br><span class="line">          title,</span><br><span class="line">          collapsable: false,</span><br><span class="line">          children: [</span><br><span class="line">            &#x27;&#x27;,</span><br><span class="line">            &#x27;getting-started&#x27;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;docs:dev&quot;: &quot;vuepress dev docs&quot;,</span><br><span class="line">    &quot;docs:build&quot;: &quot;vuepress build docs&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;gh-pages -d docs/.vuepress/dist&quot;,</span><br><span class="line">    &quot;deploy:build&quot;: &quot;npm run docs:build &amp;&amp; gh-pages -d docs/.vuepress/dist&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;gh-pages&quot;: &quot;^2.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>执行下列命令，可以开始写作了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局安装VuePress</span><br><span class="line">npm install -g vuepress</span><br><span class="line"></span><br><span class="line"># 安装组件</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 开始写作</span><br><span class="line">npm run docs:dev</span><br><span class="line"></span><br><span class="line"># 构建静态文件</span><br><span class="line">npm run docs:build</span><br></pre></td></tr></table></figure><h3 id="在Github-Page部署"><a href="#在Github-Page部署" class="headerlink" title="在Github Page部署"></a>在Github Page部署</h3><ol><li>创建仓库</li></ol><blockquote><ul><li>如果要部署到https:&#x2F;&#x2F;{USERNAME}.github.io地址上，需要创建以{USERNAME}.github.io为名字的仓库</li><li>如果部署到https:&#x2F;&#x2F;{USERNAME}.github.io&#x2F;{REPO}&#x2F;地址上，要创建{REPO}仓库。</li></ul></blockquote><ol start="2"><li>添加远程仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 用你仓库的url</span><br><span class="line">git remote add origin https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;.git   </span><br><span class="line"></span><br><span class="line"># 提交到你的仓库</span><br><span class="line">git push -u origin master  </span><br></pre></td></tr></table></figure><ol start="3"><li>发布</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用gh-pages组件打包并推送</span><br><span class="line">$ sudo npm run deploy:build</span><br></pre></td></tr></table></figure><p>看到如下日志部署成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; npm run docs:build &amp;&amp; gh-pages -d docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line">&gt; vuepress build docs</span><br><span class="line"></span><br><span class="line"> WAIT  Extracting site metadata...</span><br><span class="line">[13:51:40] Compiling Client</span><br><span class="line">[13:51:40] Compiling Server</span><br><span class="line">(node:2939) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead</span><br><span class="line">[13:51:45] Compiled Server in 5s</span><br><span class="line">[13:51:49] Compiled Client in 9s</span><br><span class="line"> WAIT  Rendering static HTML...</span><br><span class="line"></span><br><span class="line"> DONE  Success! Generated static files in docs/.vuepress/dist.</span><br><span class="line"></span><br><span class="line">Published</span><br></pre></td></tr></table></figure><p>部署成功后，进入 GitHub 仓库可以看到自动创建了一个新的名为 gh_pages 的分支。在仓库 <strong>setting</strong> 中选择这个分支，通过如下地址即可访问：</p><p>https:&#x2F;&#x2F;{USERNAME}.github.io&#x2F;{REPO}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kong使用docker安装</title>
      <link href="/2018/08/30/kong-docker-install/"/>
      <url>/2018/08/30/kong-docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="Kong"><a href="#Kong" class="headerlink" title="Kong"></a>Kong</h2><p>Kong 是在客户端和（微）服务间转发API通信的API网关。 Kong 可以通过插件扩展已有功能，这些插件在 API 请求响应循环的生命周期中被执行。插件使用 Lua 编写，而且 Kong 还有如下几个基础功能：HTTP 基本认证、密钥认证、CORS（ Cross-origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API 请求限流、请求转发以及 nginx 监控。</p><h2 id="根据官网提供的脚本和步骤进行安装"><a href="#根据官网提供的脚本和步骤进行安装" class="headerlink" title="根据官网提供的脚本和步骤进行安装"></a>根据官网提供的脚本和步骤进行安装</h2><p>1.创建一个自定义网络，允许容器发现并相互通信。在这个例子中，kong-net是网络名称，可以使用任何名称:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure><p>2.如果希望使用 PostgreSQL 容器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">    --network=kong-net \</span><br><span class="line">    -p 15432:5432 \</span><br><span class="line">    -e &quot;POSTGRES_USER=kong&quot; \</span><br><span class="line">    -e &quot;POSTGRES_DB=kong&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \ # 同步宿主机时间</span><br><span class="line">    postgres:9.6</span><br></pre></td></tr></table></figure><p>3.准备数据库:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">    --network=kong-net \</span><br><span class="line">    -e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">    -e &quot;KONG_PG_HOST=kong-database&quot; \</span><br><span class="line">    -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \</span><br><span class="line">    kong kong migrations up</span><br></pre></td></tr></table></figure><p>4.启动一个连接数据库容器的kong容器:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong \</span><br><span class="line">    --network=kong-net \</span><br><span class="line">    -e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">    -e &quot;KONG_PG_HOST=kong-database&quot; \</span><br><span class="line">    -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \</span><br><span class="line">    -e &quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">    -e &quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">    -e &quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">    -e &quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">    -e &quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \ # 同步宿主机时间</span><br><span class="line">    -p 18000:8000 \</span><br><span class="line">    -p 18443:8443 \</span><br><span class="line">    -p 18001:8001 \</span><br><span class="line">    -p 18444:8444 \</span><br><span class="line">    kong</span><br></pre></td></tr></table></figure><p>如果出现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: could not prepare Kong prefix at /usr/local/kong: nginx configuration is invalid (exit code 1):</span><br><span class="line">nginx: the configuration file /usr/local/kong/nginx.conf syntax is ok</span><br><span class="line">nginx: [alert] mmap(MAP_ANON|MAP_SHARED, 134217728) failed (12: Out of memory)</span><br><span class="line">nginx: configuration file /usr/local/kong/nginx.conf test failed</span><br></pre></td></tr></table></figure><p>则使用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name kong \</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -i http://localhost:8001/</span><br></pre></td></tr></table></figure><h3 id="kong-dashboard-要配合-kong-的版本，因此上面kong使用0-13版本"><a href="#kong-dashboard-要配合-kong-的版本，因此上面kong使用0-13版本" class="headerlink" title="kong-dashboard 要配合 kong 的版本，因此上面kong使用0.13版本"></a>kong-dashboard 要配合 kong 的版本，因此上面kong使用0.13版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -p 8080:8080 pgbi/kong-dashboard start --kong-url http://kong-ip:8001</span><br></pre></td></tr></table></figure><h3 id="pg管理后台"><a href="#pg管理后台" class="headerlink" title="pg管理后台"></a>pg管理后台</h3><p>docker run -p 10080:80 <br>–link kong-database:kong-database <br>-e “PGADMIN_DEFAULT_EMAIL&#x3D;<a href="mailto:&#117;&#115;&#101;&#114;&#x40;&#x64;&#111;&#109;&#97;&#x69;&#110;&#46;&#99;&#x6f;&#x6d;">user@domain.com</a>“ <br>-e “PGADMIN_DEFAULT_PASSWORD&#x3D;SuperSecret” <br>-d dpage&#x2F;pgadmin4</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker使用镜像和操作容器</title>
      <link href="/2018/08/24/docker-images-container/"/>
      <url>/2018/08/24/docker-images-container/</url>
      
        <content type="html"><![CDATA[<h2 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>Docker Hub 上有大量的镜像可以用，从 Docker 镜像仓库获取镜像的命令是 docker pull。其命令格式如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu</span><br></pre></td></tr></table></figure><p>对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</p><p>如果想拉取指定镜像版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>还可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker system df</span><br></pre></td></tr></table></figure><h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image rm &lt;镜像名&gt; [&lt;镜像短ID&gt; ...]</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image rm 501ad78535f0</span><br><span class="line">$ docker image rm 501a</span><br><span class="line">$ docker image rm centos</span><br></pre></td></tr></table></figure><h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。</p><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</p><p>1.新建并启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm -p 8888:8080 tomcat:8.0</span><br></pre></td></tr></table></figure><p>2.启动和终止容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps #列出所有启动的容器</span><br><span class="line">$ docker ps -a #列出所有已终止的容器</span><br></pre></td></tr></table></figure><p>想要启动和终止容器，只需</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ docker start &lt;容器ID&gt;</span><br><span class="line">$ docker stop &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器使用-exec-命令"><a href="#进入容器使用-exec-命令" class="headerlink" title="进入容器使用 exec 命令"></a>进入容器使用 exec 命令</h3><p>docker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p><p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p><p>当 -it 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker exec -i 69d1 bash</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ docker exec -it 69d1 bash</span><br><span class="line">root@69d137adef7a:/#</span><br></pre></td></tr></table></figure><p>另外如果从这个容器中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p><h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker export 7691a814370e &gt; ubuntu.tar</span><br><span class="line">$ cat ubuntu.tar | docker import - test/ubuntu:v1.0</span><br></pre></td></tr></table></figure><h3 id="停用全部运行的容器"><a href="#停用全部运行的容器" class="headerlink" title="停用全部运行的容器"></a>停用全部运行的容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -q)</span><br></pre></td></tr></table></figure><h3 id="删除全部容器"><a href="#删除全部容器" class="headerlink" title="删除全部容器"></a>删除全部容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq) #实现一条命令停用并删除容器</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#同步宿主机与容器时间</span><br><span class="line">$ docker run --name gaoxi-user-1 -p 18081:8080 -v /etc/localtime:/etc/localtime chaimm/tomcat:1.1</span><br><span class="line"></span><br><span class="line">#在mac下无法使用上面的命令</span><br><span class="line">$ docker run --name gaoxi-user-1 -p 18081:8080 -e TZ=&quot;Asia/Shanghai&quot; -it chaimm/tomcat:1.1 bash</span><br><span class="line"></span><br><span class="line">$ docker run --name zookeeper -p 2181:2181 -p 10000:8080 chaimm/zookeeper-dubbo:1.0</span><br><span class="line"></span><br><span class="line">$ docker run --name zookeeper-1 --restart always -d zookeeper:3.4.11</span><br><span class="line"></span><br><span class="line">#下载好的zookeeper镜像存储到本地文件</span><br><span class="line">$ docker save -o /opt/downloads/zookeeper-image.tar zookeeper:3.4.11</span><br><span class="line"></span><br><span class="line">#文件上传到内网中可以使用以下命令将其载入镜像</span><br><span class="line">$docker load -i /opt/images/zookeeper-image.tar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#获取所有容器名称及其IP地址</span><br><span class="line">$ docker inspect -f &#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;.NetworkSettings.IPAddress &#125;&#125;&#x27; $(docker ps -aq) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker ps顯示所有 containers</span><br><span class="line">docker images顯示所有的 images</span><br><span class="line">docker rmi -f db7e8a0d84e3移除一個 image</span><br><span class="line">docker pause bb230bd64efa停止 container 中的所有 processes</span><br><span class="line">docker unpause bb230bd64efa取消停止 container 中的所有 processes</span><br><span class="line">docker logs bb230bd64efa查看 container 的 log</span><br><span class="line">docker stop bb230bd64efa停止 container 運作</span><br><span class="line">docker start bb230bd64efa啟用 container</span><br><span class="line">docker commit bb230bd64efa ubuntu:12.04commit container 中的修改， bb230bd64efa 是 container id， ubuntu:12.04 是 image 名稱</span><br><span class="line">docker run -it ubuntu:12.04 bash啟動 container ，並登入</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong\</span><br><span class="line">        -e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">        -e &quot;KONG_PG_HOST=192.168.200.11&quot; \</span><br><span class="line">        -e &quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">        -e &quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">        -e &quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">        -e &quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">        -p 8888:8000 \</span><br><span class="line">        -p 8445:8443 \</span><br><span class="line">        -p 8889:8001 \</span><br><span class="line">        -p 8446:8444 \</span><br><span class="line">        kong:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Docker中运行Jenkins</title>
      <link href="/2018/08/23/docker-jenkins/"/>
      <url>/2018/08/23/docker-jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取jenkins镜像"><a href="#拉取jenkins镜像" class="headerlink" title="拉取jenkins镜像"></a>拉取jenkins镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull jenkins</span><br></pre></td></tr></table></figure><h2 id="创建jenkins容器"><a href="#创建jenkins容器" class="headerlink" title="创建jenkins容器"></a>创建jenkins容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 18080:8080 -p 50000:50000 -v /usr/maven/apache-maven-3.5.3:/Users/xinzhang/Downloads/apache-maven-3.5.3 jenkins</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/2018/08/20/docker-install/"/>
      <url>/2018/08/20/docker-install/</url>
      
        <content type="html"><![CDATA[<h2 id="阿里云安装Docker"><a href="#阿里云安装Docker" class="headerlink" title="阿里云安装Docker"></a>阿里云安装Docker</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</p><h3 id="使用-yum-安装（CentOS-7下）"><a href="#使用-yum-安装（CentOS-7下）" class="headerlink" title="使用 yum 安装（CentOS 7下）"></a>使用 yum 安装（CentOS 7下）</h3><p>step 1: 安装必要的一些系统工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">    device-mapper-persistent-data \</span><br><span class="line">    lvm2</span><br></pre></td></tr></table></figure><p>Step 2: 添加软件源信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>Step 3: 更新并安装Docker-CE</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>Step 4: 开启Docker服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注意：</span><br><span class="line"># 安装指定版本的Docker-CE:</span><br><span class="line"># Step 1: 查找Docker-CE的版本:</span><br><span class="line"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">#   Loading mirror speeds from cached hostfile</span><br><span class="line">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="line">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">#   Available Packages</span><br><span class="line"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span><br><span class="line"># sudo yum -y install docker-ce-[VERSION]</span><br></pre></td></tr></table></figure><h3 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，<br>CentOS 系统上可以使用这套脚本安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p><h2 id="macOS安装Docker"><a href="#macOS安装Docker" class="headerlink" title="macOS安装Docker"></a>macOS安装Docker</h2><h3 id="系统要求-1"><a href="#系统要求-1" class="headerlink" title="系统要求"></a>系统要求</h3><p>** Docker for Mac ** 要求系统最低为 macOS 10.10.3 Yosemite。如果系统不满足需求，可以安装 ** Docker Toolbox **。</p><h3 id="手动下载安装"><a href="#手动下载安装" class="headerlink" title="手动下载安装"></a>手动下载安装</h3><p>如果需要手动安装，只需要下载 Docker for Mac。</p><p>如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将那只叫 Moby 的鲸鱼图标拖拽到 Application 文件夹即可（其间需要输入用户密码）。</p><h2 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line">Version:      17.03.0-ce</span><br><span class="line">API version:  1.26</span><br><span class="line">Go version:   go1.7.5</span><br><span class="line">Git commit:   3a232c8</span><br><span class="line">Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line">OS/Arch:      linux/amd64</span><br><span class="line">Server:</span><br><span class="line">Version:      17.03.0-ce</span><br><span class="line">API version:  1.26 (minimum version 1.12)</span><br><span class="line">Go version:   go1.7.5</span><br><span class="line">Git commit:   3a232c8</span><br><span class="line">Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line">OS/Arch:      linux/amd64</span><br><span class="line">Experimental: false</span><br></pre></td></tr></table></figure><p>若能正常输出以上信息，则说明安装成功。</p><h2 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="删除-Docker-CE"><a href="#删除-Docker-CE" class="headerlink" title="删除 Docker CE"></a>删除 Docker CE</h2><p>执行以下命令来删除 Docker CE：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker #默认安装路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql-remote-root-user</title>
      <link href="/2018/08/01/mysql-remote-root-user/"/>
      <url>/2018/08/01/mysql-remote-root-user/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-创建用户"><a href="#Mysql-创建用户" class="headerlink" title="Mysql 创建用户"></a>Mysql 创建用户</h1><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="使用Navicat-创建用户及分配权限"><a href="#使用Navicat-创建用户及分配权限" class="headerlink" title="使用Navicat 创建用户及分配权限"></a>使用Navicat 创建用户及分配权限</h3><h3 id="拷贝数据库文件"><a href="#拷贝数据库文件" class="headerlink" title="拷贝数据库文件"></a>拷贝数据库文件</h3><p>今天使用xampp的过程中， 出现mysql无法正常start的情况，通过log查看发现是table.user的索引坏了。</p><p>上网尝试了多种方法无果，只了重新安装，那么就需要把原来的库表备份出来。</p><p>在备份的过程中得知数据库引擎不同InnoDB 和MyISAM的备份方式就不同：</p><ol><li>在数据库引擎类型为InnoDB时，拷贝数据文件的同时还需要拷贝ibdata1。如果发现还是有问题，将目录下的ib_logfile*文件全部删除掉，重新启动mysql服务。</li><li>MyISAM类型的数据文件可以在不同操作系统中COPY，只需要拷贝数据库名字文件夹下面的文件，这样数据库就拷贝完了。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用frp实现内网穿透</title>
      <link href="/2018/07/01/use-frp/"/>
      <url>/2018/07/01/use-frp/</url>
      
        <content type="html"><![CDATA[<p>** frp ** 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议，并且支持根据域名进行路由转发。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>根据对应的操作系统及架构，在<a href="https://github.com/fatedier/frp/releases">Release</a>页面中找到对应的frp程序。</p><h3 id="外网主机"><a href="#外网主机" class="headerlink" title="外网主机"></a>外网主机</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用wget指令下载frp</span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.13.0/frp_0.13.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 使用tar指令解压tar.gz文件</span><br><span class="line">tar -zxvf frp_0.13.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"># 使用cd指令进入解压出来的文件夹，外网主机作为服务端，可以删掉不必要的客户端文件，使用rm指令删除文件。</span><br><span class="line">cd frp_0.13.0_linux_amd64</span><br><span class="line">rm -f frpc</span><br><span class="line">rm -f frpc.ini</span><br><span class="line"></span><br><span class="line"># 接下来要修改服务器配置文件，即frps.ini文件。使用vi指令对目标文件进行编辑。</span><br><span class="line"></span><br><span class="line">vi frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">vhost_https_port = 443</span><br><span class="line"></span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line"></span><br><span class="line">subdomain_host = frps.com</span><br><span class="line"></span><br><span class="line"># [common]部分是必须有的配置，其中bind_port是自己设定的frp服务端端口，vhost_http_port是自己设定的http访问端口, dashboard_port是控制台端口， subdomain_host自定义域名路由。</span><br><span class="line"></span><br><span class="line"># 保存上面的配置后，使用以下指令启动frp服务端。（如果需要在后台运行，请往下翻阅关于后台运行的部分。）</span><br><span class="line"></span><br><span class="line"># 服务端的工作就到此结束了。</span><br><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端前面的操作和服务端一样，根据自己的操作系统下载对应的程序，这里不一一解释。主要看下客户端的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = no2.sunnyrx.com</span><br></pre></td></tr></table></figure><p>上面的配置和服务端是对应的。</p><p>[common]中的server_addr填frp服务端的ip（也就是外网主机的IP），server_port填frp服务端的bind_prot。</p><p>[web]同上，local_port填群晖的web端口。这里创建了两个http反向代理是为了分别映射群晖两个重要的端口，5000和80，前者用于登录群晖管理，后者用于群晖的Web Station和DS Photo。</p><p>保存配置，输入以下指令运行frp客户端。（同样如果需要在后台运行，请往下翻阅关于后台运行的部分。）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>此时在服务端会看到”start proxy sucess”字样，即连接成功。</p><h3 id="让frp在后台运行"><a href="#让frp在后台运行" class="headerlink" title="让frp在后台运行"></a>让frp在后台运行</h3><p>虽然现在frp运作起来了，内网穿透也实现了，但这还是不够的。此时如果断开与服务端或者客户端的SSH连接（比如关掉了Xshell）也就中止了frp的运行。</p><p>保持frp运行是关键是让服务端的frp和客户端的frp在后台运行，这里提两个方法供参考，一个是使用supervisor，另一个是使用winsw, 分别实现了linux和windows下后台运行。</p><ol><li>supervisor</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 需要知道几个名词</span><br><span class="line">supervisor：要安装的软件的名称。 </span><br><span class="line">supervisord：装好supervisor软件后，supervisord用于启动supervisor服务。 </span><br><span class="line">supervisorctl：用于管理supervisor配置文件中program。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">yum install supervisor</span><br><span class="line"></span><br><span class="line"># 开机自启动</span><br><span class="line">systemctl enable supervisord </span><br><span class="line"></span><br><span class="line"># 查看是否启动</span><br><span class="line">systemctl is-enabled supervisord</span><br><span class="line"></span><br><span class="line"># 启动supervisord服务</span><br><span class="line">systemctl start supervisord </span><br><span class="line"></span><br><span class="line"># 查看supervisord服务状态</span><br><span class="line">systemctl status supervisord </span><br><span class="line"></span><br><span class="line"># 查看是否存在supervisord进程</span><br><span class="line">ps -ef|grep supervisord </span><br><span class="line"></span><br><span class="line"># 停止</span><br><span class="line">systemctl stop supervisord</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">systemctl restart supervisord</span><br></pre></td></tr></table></figure><p>默认安装supervisor文件会生成在下面的路径中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/supervisord.conf</span><br><span class="line">/etc/supervisord.d/</span><br></pre></td></tr></table></figure><p>然后在&#x2F;etc&#x2F;supervisor.d下新建一个配置文件frps.ini，输入以下内容。command应该是你放置frps软件的位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:frps]</span><br><span class="line">command = /opt/frp/frp_0.9.3_linux_amd64/frps -c /opt/frp/frp_0.9.3_linux_amd64/frps.ini</span><br><span class="line">autostart = true</span><br></pre></td></tr></table></figure><p>然后使用上面的命令启动supervisor。</p><p>2.winsw</p><p><a href="https://github.com/kohsuke/winsw/releases">winsw</a>能让Windows程序运行为服务，只需要将winsw.exe和frpc.exe放到了一起，这样只需要直接填写程序名称。然后在和winsw.exe同级的目录下，新建winsw.xml文件，输入以下内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">    &lt;id&gt;frp&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;frp&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;用frp发布本地电脑网站到外网&lt;/description&gt;</span><br><span class="line">    &lt;executable&gt;frpc&lt;/executable&gt;</span><br><span class="line">    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;</span><br><span class="line">    &lt;logmode&gt;reset&lt;/logmode&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><p>然后打开管理员权限命令提示符，使用下面的命令安装并启动服务。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winsw install</span><br><span class="line">winsw uninstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Jenkins实现自动化部署</title>
      <link href="/2018/06/27/use-jenkins-for-auto-deploy/"/>
      <url>/2018/06/27/use-jenkins-for-auto-deploy/</url>
      
        <content type="html"><![CDATA[<p><strong>Jenkins</strong> 是一个 <a href="https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90">持续集成</a> 工具。在这里也只是简单一用，实现下自动化部署。对于它强大的功能在日后再慢慢展开吧。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从官网下载war包，</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/%5Buse-jenkins-for-auto-deploy%5DIMG_1.png" alt="jenkins download"></p><p>直接放置到Tomcat目录或通过命令行 java -jar jenkins.war 运行。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.首次启动jenkins，出于安全考虑，jenkins会生成一个随机的口令到文件中，复制文件中的口令到jenkins即可通过访问。</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-103937.png" alt="jenkins password"></p><p>2.选择安装默认插件：</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-104439.png" alt="jenkins plugins"></p><p>3.跳转创建用户使用admin登录：</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-110142.png" alt="jenkins account"></p><p>4.系统管理-全局工具配置-Maven、JDK安装：</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-110142.png" alt="jenkins con"></p><h2 id="部署SVN项目"><a href="#部署SVN项目" class="headerlink" title="部署SVN项目"></a>部署SVN项目</h2><h2 id="常用问题"><a href="#常用问题" class="headerlink" title="常用问题"></a>常用问题</h2><p>1.使用Tomcat运行jenkins时，出现安装目录在C:\Windows\System32\config\systemprofile.jenkins\secrets\initialAdminPassword<br>的情况：</p><blockquote><p>因为Tomcat服务启动使用本地系统的帐户，在服务里改成具体的用户帐户即可。</p></blockquote><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-170630.png" alt="jenkins init pwd"></p><p>2.点击创建一个新任务，没有maven选择：</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-110406.png" alt="jenkins con"></p><p>需要安装 maven integration 插件：</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-112152.png" alt="maven integration"></p><p>3.如果需要发包到服务器需要安装 publish over SSH 插件:</p><p><img src="http://7vzqnv.com1.z0.glb.clouddn.com/hexo/use-jenkins-for-auto-deploy-WX20180701-112421.png" alt="publish over ssh"></p><p>4.如何编译部署本地项目到服务器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装JDK-Maven-node</title>
      <link href="/2018/06/26/install-jdk-maven-node/"/>
      <url>/2018/06/26/install-jdk-maven-node/</url>
      
        <content type="html"><![CDATA[<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install java</span><br></pre></td></tr></table></figure><p>查看安装目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -lrt /usr/bin/java</span><br><span class="line">/usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"># ls -lrt /etc/alternatives/java</span><br><span class="line">/etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64/jre/bin/java</span><br><span class="line"># cd /usr/lib/jvm</span><br><span class="line"># ls</span><br><span class="line">java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64</span><br><span class="line">jre -&gt; /etc/alternatives/jre</span><br><span class="line">jre-1.8.0 -&gt; /etc/alternatives/jre_1.8.0</span><br><span class="line">jre-1.8.0-openjdk -&gt; /etc/alternatives/jre_1.8.0_openjdk</span><br><span class="line">jre-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64 -&gt; java-1.8.0-openjdk-1.8.0.212.b04-0.el7_6.x86_64/jre</span><br><span class="line">jre-openjdk -&gt; /etc/alternatives/jre_openjdk</span><br></pre></td></tr></table></figure><p>添加到PATH</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h2 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz</span><br><span class="line"># tar xzvf apache-maven-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>Adding to PATH</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/root/apache-maven-3.6.1/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>下载并安装MySQL官方的 Yum Repository</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"># yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>首先启动MySQL</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>查看MySQL运行状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sudo systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p>但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure><p>查看初始密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;z?guwrBhH7p&gt;&#x27;;</span><br></pre></td></tr></table></figure><p>开放权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all on *.* to root@&#x27;%&#x27; identified by &#x27;z?guwrBhH7p&gt;&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yum install nginx</span><br><span class="line"># service nginx start</span><br><span class="line"># service nginx stop</span><br><span class="line"># service nginx restart</span><br></pre></td></tr></table></figure><p>查看nginx安装目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ps -ef | grep nginx</span><br><span class="line"># find /|grep nginx.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装NexT主题</title>
      <link href="/2018/06/26/install-the-next-theme/"/>
      <url>/2018/06/26/install-the-next-theme/</url>
      
        <content type="html"><![CDATA[<p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p><h3 id="下载主题包"><a href="#下载主题包" class="headerlink" title="下载主题包"></a>下载主题包</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">克隆最新版本</button><button type="button" class="tab">下载稳定版本</button></div><div class="tab-contents"><div class="tab-item-content active"><p>在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>前往 NexT 版本 <a href="https://github.com/iissnan/hexo-theme-next/releases">发布页面</a>。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。例如，下载 v0.4.0 版本：<br><img src="https://theme-next.iissnan.com/uploads/five-minutes-setup/download-stable-version.png" alt="next-releases"><br>解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-0.4.0）更改为 next。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>当 克隆&#x2F;下载 完成后，打开 <strong>站点配置文件</strong>， 找到 theme 字段，注释掉默认的主题并将其值更改为 next。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># theme: landscape</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --debug。 </span><br></pre></td></tr></table></figure><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><p>NexT 提供三种不同风格主题方案：<br><img src="https://theme-next.iissnan.com/assets/img/NextSchemes3.png" alt="NexT-Schemes"><br>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub搭建Hexo博客并开启HTTPS</title>
      <link href="/2018/06/26/hexo-on-github-and-enable-https/"/>
      <url>/2018/06/26/hexo-on-github-and-enable-https/</url>
      
        <content type="html"><![CDATA[<p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><strong>GitHub</strong> 是一个面向开源及私有软件项目的托管平台, 它提供的 <strong>GitHub Pages</strong> 是一个静态站点托管服务，旨在直接从GitHub存储库托管个人、组织或项目页面。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，先检查是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install （貌似不需要这步，执行init就会install了）</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h3 id="本地运行服务"><a href="#本地运行服务" class="headerlink" title="本地运行服务"></a>本地运行服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="本地运行清除缓存"><a href="#本地运行清除缓存" class="headerlink" title="本地运行清除缓存"></a>本地运行清除缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo generate --deploy</span><br></pre></td></tr></table></figure><blockquote><ul><li>$ hexo publish 发表草稿</li><li>$ hexo g -d 文件生成后立即部署网站</li></ul></blockquote><p>** 如果使用Git服务存放，在执行部署前需要先安装 hexo-deployer-git **</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改网站根目录下的_config.yml配置:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">repo</td><td align="left">库（Repository）地址</td></tr><tr><td align="left">branch</td><td align="left">分支名称</td></tr></tbody></table><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>开启 Github Pages，创建一个命名为：username.github.io 的资源库，这里的username就是你的用户名。如果想使用自定义域名需要在域名解析管理新增 CNAME 解析：</p><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">@</td><td align="center">username.github.io</td></tr><tr><td align="center">CNAME</td><td align="center">www</td><td align="center">username.github.io</td></tr></tbody></table><h3 id="GitHub-Pages-配置"><a href="#GitHub-Pages-配置" class="headerlink" title="GitHub Pages 配置"></a>GitHub Pages 配置</h3><p>完成域名解析后还需要在 GitHub Pages 仓库根目录下创建CNAME文件，文件内容为自定义的域名，例如：hellozhang.xin</p><h3 id="GitHub-Pages-开启HTTPS："><a href="#GitHub-Pages-开启HTTPS：" class="headerlink" title="GitHub Pages 开启HTTPS："></a>GitHub Pages 开启HTTPS：</h3><ul><li>在 GitHub Pages 存储库的主页面下，单击设置。</li></ul><p><img src="https://help.github.com/assets/images/help/repository/repo-actions-settings.png" alt="Repository settings button"></p><ul><li>在“GitHub页面”下，选择强制HTTPS。</li></ul><p><img src="https://help.github.com/assets/images/help/pages/enforce-https-checkbox.png" alt="Enforce HTTPS checkbox"></p><blockquote><p>如果使用Chrome浏览器未能在地址栏出现 <strong>绿色小锁</strong> 或出现小叹号提示网站与建立完全安全的链接，请检查自己的网站引用的资源文件有没有使用了 http 协议，请替换成相应的 https 资源。可通过F12开发者工具检查。</p></blockquote><table><thead><tr><th align="center">Asset type</th><th align="center">HTTP</th><th align="center">HTTPS</th></tr></thead><tbody><tr><td align="center">CSS</td><td align="center">&lt;link rel&#x3D;”stylesheet” href&#x3D;”<a href="http://example.com/css/main.css%22%3E">http://example.com/css/main.css&quot;&gt;</a></td><td align="center">&lt;link rel&#x3D;”stylesheet” href&#x3D;”<a href="https://example.com/css/main.css%22%3E">https://example.com/css/main.css&quot;&gt;</a></td></tr><tr><td align="center">JavaScript</td><td align="center">&lt;script type&#x3D;”text&#x2F;javascript” src&#x3D;”<a href="http://example.com/js/main.js%22%3E">http://example.com/js/main.js&quot;&gt;</a></script></td><td align="center">&lt;script type&#x3D;”text&#x2F;javascript” src&#x3D;”<a href="https://example.com/js/main.js%22%3E">https://example.com/js/main.js&quot;&gt;</a></script></td></tr><tr><td align="center">Image</td><td align="center">&lt;A HREF&#x3D;”<a href="http://www.somesite.com">">http://www.somesite.com&quot;&gt;</a>&lt;IMG SRC&#x3D;”<a href="http://www.example.com/logo.jpg">http://www.example.com/logo.jpg</a>“ alt&#x3D;”Logo”&gt;</a></td><td align="center">&lt;A HREF&#x3D;”<a href="https://www.somesite.com">">https://www.somesite.com&quot;&gt;</a>&lt;IMG SRC&#x3D;”<a href="https://www.example.com/logo.jpg">https://www.example.com/logo.jpg</a>“ alt&#x3D;”Logo”&gt;</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
